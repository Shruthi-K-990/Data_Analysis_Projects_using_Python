# -*- coding: utf-8 -*-
"""Delhi_Air_Quality_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vpDCPrYl1VJ_112yuwfKxzQxtHDb_WN5
"""

import pandas as pd
import plotly.express as px
import plotly.io as pio
import plotly.graph_objects as go
pio.templates.default = "plotly_white"

data = pd.read_csv("delhiaqi.csv")
print(data.head())

print(data['date']) # type object

"""date type is object so converting to date time"""

data['date'] = pd.to_datetime(data['date'])
print(data['date'])

#intensity of each pollutant over time in the air quality
#time series plot
fig = go.Figure()
for pollutant in ['co','no','no2','o3','so2','pm2_5','pm10','nh3']:
    fig.add_trace(go.Scatter(x=data['date'],y=data[pollutant],mode='lines',name=pollutant))
fig.update_layout(title='Time Series Analysis of Air Pollutants in Delhi',xaxis_title='Date',yaxis_title='Concentration (µg/m³)')
fig.show()

#calculate the air quality index and its category
aqi_breakpoints = [
    (0, 12.0, 50), (12.1, 35.4, 100), (35.5, 55.4, 150),
    (55.5, 150.4, 200), (150.5, 250.4, 300), (250.5, 350.4, 400),
    (350.5, 500.4, 500)]

def calculate_aqi(pollutant_name,concentration):
    for low,high,aqi in aqi_breakpoints:
        if low <= concentration <= high:
            return aqi
    return None

def calculate_overall_aqi(row):
    aqi_values = []
    pollutants = ['co','no','no2','o3','so2','pm2_5','pm10','nh3']
    for pollutant in pollutants:
        aqi = calculate_aqi(pollutant,row[pollutant])
        if aqi is not None:
            aqi_values.append(aqi)
    return max(aqi_values)

#Calculate AQL for each row
data['AQI'] = data.apply(calculate_overall_aqi,axis=1)

#Define AQI categories
aqi_categories = [
 (0, 50, 'Good'), (51, 100, 'Moderate'), (101, 150, 'Unhealthy for Sensitive Groups'),
    (151, 200, 'Unhealthy'), (201, 300, 'Very Unhealthy'), (301, 500, 'Hazardous')
]

def categorize_aqi(aqi_value):
    for low,high,category in aqi_categories:
        if low <= aqi_value <= high:
            return category
    return None

#Categorize AQI
data['AQI Category'] = data['AQI'].apply(categorize_aqi)
print(data.head())

#AQI in Delhi in Jan
fig = px.bar(data,x='date',y='AQI',title='AQI of Delhi in January')
fig.update_xaxes(title='Date')
fig.update_yaxes(title='AQI')
fig.show()

#AQI Category Distribution over time
fig = px.histogram(data,x='date',color='AQI Category',title='AQI Category Distribution Over Time')
fig.update_xaxes(title='Date')
fig.update_yaxes(title='Count')
fig.show()

#Distribution of pollutants in air quality
pollutants = ["co", "no", "no2", "o3", "so2", "pm2_5", "pm10", "nh3"]
pollutant_colors = px.colors.qualitative.Plotly

total_concentration = data[pollutants].sum()
concentration_data = pd.DataFrame({
    "pollutant":pollutants,
    "concentration":total_concentration
})

fig = px.pie(concentration_data,names="pollutant",values='concentration',title="Pollutant Concentrations in Delhi",hole=0.4,color_discrete_sequence=pollutant_colors)
fig.update_traces(textinfo="percent+label")
fig.update_layout(legend_title="Pollutant")
fig.show()

#Correlation between pollutants
correlation_matrix = data[pollutants].corr()
fig = px.imshow(correlation_matrix,x=pollutants,y=pollutants,title='Correlation Between pollutants')
fig.show()